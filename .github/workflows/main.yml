name: Full Stack CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  backend-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.17'

      - name: Build Backend
        run: go build -o main .

  frontend-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install

      - name: Build Frontend
        run: npm run build

  backend-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.17'

      - name: Run Backend Tests
        run: go test ./...

  frontend-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Run Frontend Tests
        run: npm test

  backend-lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.17'

      - name: Install golint
        run: go install golang.org/x/lint/golint@latest

      - name: Lint Backend Code
        run: golint ./...

  frontend-lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Lint Frontend Code
        run: npm run lint

  docker-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Backend Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/backend-image .
          docker push ${{ secrets.DOCKER_USERNAME }}/backend-image

      - name: Build and Push Frontend Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/frontend-image -f frontend-directory/Dockerfile .
          docker push ${{ secrets.DOCKER_USERNAME }}/frontend-image

  deploy-to-render:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.17'

      - name: Deploy Backend to Render
        env:
          RENDER_ACCOUNT_ID: ${{ secrets.RENDER_ACCOUNT_ID }}
          RENDER_PRIVATE_KEY: ${{ secrets.RENDER_PRIVATE_KEY }}
          RENDER_SERVICE_NAME: your-render-service-name
        run: |
          go build -o main .
          chmod +x main
          curl -X PATCH \
            -H "Authorization: Bearer $RENDER_PRIVATE_KEY" \
            -H "Content-Type: application/json" \
            -d '{"buildCommand": "chmod +x ./main && ./main", "startCommand": "./main"}' \
            "https://api.render.com/v1/services/${RENDER_ACCOUNT_ID}/your-render-service-name"

  deploy-to-vercel:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Deploy Frontend to Vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          vercel --token $VERCEL_TOKEN --prod
